AWSTemplateFormatVersion: '2010-09-09'
Description: Template for creating ECS services

Parameters:
  VPC:
    Type: String
    Description: VPC ID
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs

Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${AWS::StackName}-task-def'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ContainerDefinitions:
        - Name: frontend
          Image: your-dockerhub-username/frontend:latest
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub '/ecs/${AWS::StackName}'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: frontend

        - Name: backend
          Image: your-dockerhub-username/backend:latest
          Essential: true
          PortMappings:
            - ContainerPort: 5000
              HostPort: 5000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub '/ecs/${AWS::StackName}'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: backend

        - Name: recommendation
          Image: your-dockerhub-username/recommendation:latest
          Essential: true
          PortMappings:
            - ContainerPort: 8000
              HostPort: 8000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub '/ecs/${AWS::StackName}'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: recommendation

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: []
          Subnets: !Ref Subnets
      LoadBalancers:
        - ContainerName: frontend
          ContainerPort: 3000
          TargetGroupArn: !Ref FrontendTargetGroup
        - ContainerName: backend
          ContainerPort: 5000
          TargetGroupArn: !Ref BackendTargetGroup
        - ContainerName: recommendation
          ContainerPort: 8000
          TargetGroupArn: !Ref RecommendationTargetGroup

  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-frontend-tg'
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /health

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-backend-tg'
      Port: 5000
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /health

  RecommendationTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-recommendation-tg'
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /health
